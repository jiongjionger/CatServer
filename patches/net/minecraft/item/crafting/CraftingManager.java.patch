--- ../src-base/minecraft/net/minecraft/item/crafting/CraftingManager.java
+++ ../src-work/minecraft/net/minecraft/item/crafting/CraftingManager.java
@@ -36,12 +36,13 @@
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private static int nextAvailableId;
-    public static final RegistryNamespaced<ResourceLocation, IRecipe> REGISTRY = new RegistryNamespaced<ResourceLocation, IRecipe>();
+    public static RegistryNamespaced<ResourceLocation, IRecipe> REGISTRY = net.minecraftforge.registries.GameData.getWrapper(IRecipe.class);
 
     public static boolean init()
     {
         try
         {
+            CraftingManager.nextAvailableId = 0; // Reset recipe ID count
             register("armordye", new RecipesArmorDyes());
             register("bookcloning", new RecipeBookCloning());
             register("mapcloning", new RecipesMapCloning());
@@ -84,7 +85,7 @@
                 {
                     if (!"jar".equals(uri.getScheme()))
                     {
-                        LOGGER.error("Unsupported scheme " + uri + " trying to list all recipes");
+                        LOGGER.debug("Unsupported scheme " + uri + " trying to list all recipes");
                         boolean flag2 = false;
                         return flag2;
                     }
@@ -117,13 +118,13 @@
                             }
                             catch (JsonParseException jsonparseexception)
                             {
-                                LOGGER.error("Parsing error loading recipe " + resourcelocation, (Throwable)jsonparseexception);
+                                LOGGER.debug("Parsing error loading recipe " + resourcelocation, (Throwable)jsonparseexception);
                                 flag = false;
                                 return flag;
                             }
                             catch (IOException ioexception)
                             {
-                                LOGGER.error("Couldn't read recipe " + resourcelocation + " from " + path1, (Throwable)ioexception);
+                                LOGGER.debug("Couldn't read recipe " + resourcelocation + " from " + path1, (Throwable)ioexception);
                                 flag = false;
                                 return flag;
                             }
@@ -138,12 +139,12 @@
                 return true;
             }
 
-            LOGGER.error("Couldn't find .mcassetsroot");
+            LOGGER.debug("Couldn't find .mcassetsroot");
             flag1 = false;
         }
         catch (IOException | URISyntaxException urisyntaxexception)
         {
-            LOGGER.error("Couldn't get a list of all recipe files", (Throwable)urisyntaxexception);
+            LOGGER.debug("Couldn't get a list of all recipe files", (Throwable)urisyntaxexception);
             flag1 = false;
             return flag1;
         }
@@ -173,12 +174,14 @@
         }
     }
 
-    public static void register(String name, IRecipe recipe)
+    //Forge: Made private use GameData/Registry events!
+    private static void register(String name, IRecipe recipe)
     {
         register(new ResourceLocation(name), recipe);
     }
 
-    public static void register(ResourceLocation name, IRecipe recipe)
+    //Forge: Made private use GameData/Registry events!
+    private static void register(ResourceLocation name, IRecipe recipe)
     {
         if (REGISTRY.containsKey(name))
         {
@@ -186,6 +189,7 @@
         }
         else
         {
+            recipe.setKey(name);
             REGISTRY.register(nextAvailableId++, name, recipe);
         }
     }
@@ -199,7 +203,7 @@
                 return irecipe.getCraftingResult(craftMatrix);
             }
         }
-
+        craftMatrix.currentRecipe = null; // CraftBukkit - Clear recipe when no recipe is found
         return ItemStack.EMPTY;
     }
 
@@ -210,10 +214,12 @@
         {
             if (irecipe.matches(craftMatrix, worldIn))
             {
+                craftMatrix.currentRecipe = irecipe; // CraftBukkit
                 return irecipe;
             }
         }
 
+        craftMatrix.currentRecipe = null; // CraftBukkit - Clear recipe when no recipe is found
         return null;
     }
 
@@ -243,11 +249,13 @@
         return REGISTRY.getObject(name);
     }
 
+    @Deprecated //DO NOT USE THIS
     public static int getIDForRecipe(IRecipe recipe)
     {
         return REGISTRY.getIDForObject(recipe);
     }
 
+    @Deprecated //DO NOT USE THIS
     @Nullable
     public static IRecipe getRecipeById(int id)
     {
